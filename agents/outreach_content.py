"""
Outreach Content Agent - Generates personalized email content using AI.
"""

from typing import Dict, Any, List
import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent.parent))

from agents.base_agent import BaseAgent
from tools.openai_client import OpenAIClient
from utils.validators import validate_email_message

class OutreachContentAgent(BaseAgent):
    """
    Agent responsible for generating personalized outreach
    email content using LLM.
    """
    
    def execute(self, inputs: Dict[str, Any]) -> Dict[str, Any]:
        """
        Generate personalized email content for leads.
        
        Args:
            inputs: Dictionary containing:
                - ranked_leads: List of scored lead dictionaries
                - persona: Persona to write as (e.g., "SDR")
                - tone: Tone of emails (e.g., "friendly")
        
        Returns:
            Dictionary with 'messages' list
        """
        self.log_execution_start(inputs)
        
        try:
            ranked_leads = inputs.get('ranked_leads', [])
            persona = inputs.get('persona', 'SDR')
            tone = inputs.get('tone', 'friendly')
            
            self.log_step("Generating emails", 
                         f"Creating {len(ranked_leads)} personalized messages")
            
            # Initialize AI client (will auto-detect Gemini from .env)
            openai_config = self.get_tool_config('OpenAI')
            openai_client = OpenAIClient()  # Auto-detects Gemini from environment
            
            messages = []
            
            for ranked_lead in ranked_leads:
                lead = ranked_lead['lead']
                score = ranked_lead['score']
                
                try:
                    self.log_step(f"Generating for {lead.get('contact')}", 
                                 f"Score: {score}")
                    
                    # Generate personalized email
                    email = openai_client.generate_email(
                        lead_data=lead,
                        persona=persona,
                        tone=tone
                    )
                    
                    # Add friendly disclaimer for friends (Option A)
                    friend_name = lead.get('contact_name', 'there')
                    email_body_with_disclaimer = email.get('body', '') + f"\n\n---\n\n**P.S. Hey {friend_name}! ðŸ‘‹**\n\nThis is Sai Teja testing an AI-powered lead generation system I built for Analytos.ai assessment. You're one of my test subjects! ðŸ˜„\n\nThe email above was 100% generated by Google Gemini AI based on your company's recent news. Pretty cool, right?\n\nLet me know what you think! (And sorry for the spam! ðŸ˜…)\n\n- Sai Teja\n  SASTRA University"
                    
                    message = {
                        "lead_id": f"{lead.get('company', '')}_{lead.get('contact_name', '')}".replace(' ', '_').lower(),
                        "lead_name": lead.get('contact_name', ''),
                        "lead_email": lead.get('email', ''),
                        "subject": email.get('subject', ''),
                        "email_body": email_body_with_disclaimer,
                        "personalization_notes": f"Score: {score}, Tech: {', '.join(lead.get('technologies', [])[:2])}"
                    }
                    
                    # Validate message
                    is_valid, issues = validate_email_message(message)
                    if is_valid:
                        messages.append(message)
                    else:
                        self.logger.warning(f"Invalid email message: {issues}")
                        messages.append(message)  # Add anyway
                    
                except Exception as e:
                    self.logger.error(f"Failed to generate email for {lead.get('contact')}: {e}")
                    continue
            
            self.log_step("Email generation complete", 
                         f"Generated {len(messages)} messages")
            
            result = {"messages": messages}
            self.log_execution_end(result, success=True)
            
            return self.format_output(result)
            
        except Exception as e:
            error_result = self.handle_error(e, "outreach content generation")
            return error_result


if __name__ == "__main__":
    # Test Outreach Content Agent
    print("Testing OutreachContentAgent\n")
    
    config = {
        "id": "outreach_content",
        "instructions": "Generate personalized emails",
        "tools": [
            {"name": "OpenAI", "config": {"api_key": "", "model": "gpt-4o-mini"}}
        ]
    }
    
    agent = OutreachContentAgent("outreach_content", config)
    
    test_inputs = {
        "ranked_leads": [
            {
                "lead": {
                    "company": "Acme Corp",
                    "contact": "John Smith",
                    "email": "john@acme.com",
                    "role": "VP Sales",
                    "technologies": ["Salesforce", "AWS"],
                    "company_description": "Leading SaaS company",
                    "recent_news": "Raised $10M Series A"
                },
                "score": 85.5,
                "rank": 1
            }
        ],
        "persona": "SDR",
        "tone": "friendly"
    }
    
    result = agent.execute(test_inputs)
    
    messages = result.get('data', {}).get('messages', [])
    print(f"\nGenerated {len(messages)} emails:\n")
    for msg in messages:
        print(f"To: {msg['lead_name']} ({msg['lead_email']})")
        print(f"Subject: {msg['subject']}")
        print(f"\n{msg['email_body']}\n")
        print("-" * 60)
    
    print("\nâœ… OutreachContentAgent test complete!")
